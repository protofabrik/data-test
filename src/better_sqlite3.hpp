"// better_sqlite3.hpp\n//\n\n#ifndef LZZ_BETTER_SQLITE3_better_sqlite3_hpp\n#define LZZ_BETTER_SQLITE3_better_sqlite3_hpp\n#line 2 \"./src/better_sqlite3.lzz\"\n#include <climits>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <set>\n#include <unordered_map>\n#include <sqlite3.h>\n#include <node.h>\n#include <node_object_wrap.h>\n#include <node_buffer.h>\n#line 31 \"./src/util/macros.lzz\"\ntemplate <class T> using CopyablePersistent = v8::Persistent<T, v8::CopyablePersistentTraits<T>>;\n#define LZZ_INLINE inline\n#line 16 \"./src/util/macros.lzz\"\nv8::Local <v8::String> StringFromUtf8 (v8::Isolate * isolate, char const * data, int length);\n#line 19 \"./src/util/macros.lzz\"\nv8::Local <v8::String> InternalizedFromUtf8 (v8::Isolate * isolate, char const * data, int length);\n#line 22 \"./src/util/macros.lzz\"\nv8::Local <v8::Value> InternalizedFromUtf8OrNull (v8::Isolate * isolate, char const * data, int length);\n#line 26 \"./src/util/macros.lzz\"\nv8::Local <v8::String> InternalizedFromLatin1 (v8::Isolate * isolate, char const * str);\n#line 33 \"./src/util/macros.lzz\"\nvoid SetFrozen (v8::Isolate * isolate, v8::Local <v8::Context> ctx, v8::Local <v8::Object> obj, CopyablePersistent <v8::String> & key, v8::Local <v8::Value> value);\n#line 37 \"./src/util/macros.lzz\"\nvoid ThrowError (char const * message);\n#line 38 \"./src/util/macros.lzz\"\nvoid ThrowTypeError (char const * message);\n#line 39 \"./src/util/macros.lzz\"\nvoid ThrowRangeError (char const * message);\n#line 91 \"./src/util/macros.lzz\"\nstd::string CONCAT (char const * a, char const * b, char const * c);\n#line 99 \"./src/util/macros.lzz\"\nchar const * COPY (char const * source);\n#line 107 \"./src/util/macros.lzz\"\nbool IS_SKIPPED (char c);\n#line 112 \"./src/util/macros.lzz\"\ntemplate <typename T>\n#line 112 \"./src/util/macros.lzz\"\nT * ALLOC_ARRAY (size_t count);\n#line 117 \"./src/util/macros.lzz\"\ntemplate <typename T>\n#line 117 \"./src/util/macros.lzz\"\nvoid FREE_ARRAY (T * array_pointer);\n#line 121 \"./src/util/macros.lzz\"\nv8::Local <v8::FunctionTemplate> NewConstructorTemplate (v8::Isolate * isolate, v8::Local <v8::External> data, v8::FunctionCallback func, char const * name);\n#line 132 \"./src/util/macros.lzz\"\nvoid SetPrototypeMethod (v8::Isolate * isolate, v8::Local <v8::External> data, v8::Local <v8::FunctionTemplate> recv, char const * name, v8::FunctionCallback func);\n#line 145 \"./src/util/macros.lzz\"\nvoid SetPrototypeSymbolMethod (v8::Isolate * isolate, v8::Local <v8::External> data, v8::Local <v8::FunctionTemplate> recv, v8::Local <v8::Symbol> symbol, v8::FunctionCallback func);\n#line 158 \"./src/util/macros.lzz\"\nvoid SetPrototypeGetter (v8::Isolate * isolate, v8::Local <v8::External> data, v8::Local <v8::FunctionTemplate> recv, char const * name, v8::AccessorGetterCallback func);\n#line 1 \"./src/util/constants.lzz\"\nclass CS\n{\n#line 2 \"./src/util/constants.lzz\"\npublic:\n#line 4 \"./src/util/constants.lzz\"\n  static v8::Local <v8::String> Get (v8::Isolate * isolate, CopyablePersistent <v8::String> & constant);\n#line 7 \"./src/util/constants.lzz\"\n  v8::Local <v8::String> Code (v8::Isolate * isolate, int code);\n#line 13 \"./src/util/constants.lzz\"\n  explicit CS (v8::Isolate * isolate);\n#line 122 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> database;\n#line 123 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> reader;\n#line 124 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> source;\n#line 125 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> memory;\n#line 126 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> readonly;\n#line 127 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> name;\n#line 128 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> next;\n#line 129 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> length;\n#line 130 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> done;\n#line 131 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> value;\n#line 132 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> changes;\n#line 133 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> lastInsertRowid;\n#line 134 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> statement;\n#line 135 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> column;\n#line 136 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> table;\n#line 137 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> type;\n#line 138 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> totalPages;\n#line 139 \"./src/util/constants.lzz\"\n  CopyablePersistent <v8::String> remainingPages;\n#line 141 \"./src/util/constants.lzz\"\nprivate:\n#line 142 \"./src/util/constants.lzz\"\n  static void SetString (v8::Isolate * isolate, CopyablePersistent <v8::String> & constant, char const * str);\n#line 145 \"./src/util/constants.lzz\"\n  void SetCode (v8::Isolate * isolate, int code, char const * str);\n#line 149 \"./src/util/constants.lzz\"\n  std::unordered_map <int, CopyablePersistent<v8::String> > codes;\n};\n#line 1 \"./src/util/bind-map.lzz\"\nclass BindMap\n{\n#line 2 \"./src/util/bind-map.lzz\"\npublic:\n#line 6 \"./src/util/bind-map.lzz\"\n  class Pair\n  {\n#line 7 \"./src/util/bind-map.lzz\"\n    friend class BindMap;\n#line 8 \"./src/util/bind-map.lzz\"\n  public:\n#line 10 \"./src/util/bind-map.lzz\"\n    int GetIndex ();\n#line 14 \"./src/util/bind-map.lzz\"\n    v8::Local <v8::String> GetName (v8::Isolate * isolate);\n#line 18 \"./src/util/bind-map.lzz\"\n  private:\n#line 19 \"./src/util/bind-map.lzz\"\n    explicit Pair (v8::Isolate * isolate, char const * _name, int _index);\n#line 22 \"./src/util/bind-map.lzz\"\n    explicit Pair (v8::Isolate * isolate, Pair * pair);\n#line 25 \"./src/util/bind-map.lzz\"\n    CopyablePersistent <v8::String> const name;\n#line 26 \"./src/util/bind-map.lzz\"\n    int const index;\n  };\n#line 29 \"./src/util/bind-map.lzz\"\n  explicit BindMap (char _);\n#line 36 \"./src/util/bind-map.lzz\"\n  ~ BindMap ();\n#line 41 \"./src/util/bind-map.lzz\"\n  Pair * GetPairs ();\n#line 42 \"./src/util/bind-map.lzz\"\n  int GetSize ();\n#line 45 \"./src/util/bind-map.lzz\"\n  void Add (v8::Isolate * isolate, char const * name, int index);\n#line 51 \"./src/util/bind-map.lzz\"\nprivate:\n#line 52 \"./src/util/bind-map.lzz\"\n  void Grow (v8::Isolate * isolate);\n#line 64 \"./src/util/bind-map.lzz\"\n  Pair * pairs;\n#line 65 \"./src/util/bind-map.lzz\"\n  int capacity;\n#line 66 \"./src/util/bind-map.lzz\"\n  int length;\n};\n#line 19 \"./src/better_sqlite3.lzz\"\nstruct Addon;\n#line 20 \"./src/better_sqlite3.lzz\"\nclass Statement;\n#line 21 \"./src/better_sqlite3.lzz\"\nclass Backup;\n#line 1 \"./src/objects/database.lzz\"\nclass Database : public node::ObjectWrap\n{\n#line 2 \"./src/objects/database.lzz\"\npublic:\n#line 4 \"./src/objects/database.lzz\"\n  static v8::Local <v8 :: Function> Init (v8::Isolate * isolate, v8::Local <v8 :: External> data);\n#line 22 \"./src/objects/database.lzz\"\n  class CompareDatabase\n  {\n#line 22 \"./src/objects/database.lzz\"\n  public:\n#line 23 \"./src/objects/database.lzz\"\n    bool operator () (Database const * const a, Database const * const b) const;\n  };\n#line 27 \"./src/objects/database.lzz\"\n  class CompareStatement\n  {\n#line 27 \"./src/objects/database.lzz\"\n  public:\n#line 28 \"./src/objects/database.lzz\"\n    bool operator () (Statement const * const a, Statement const * const b) const;\n  };\n#line 32 \"./src/objects/database.lzz\"\n  class CompareBackup\n  {\n#line 32 \"./src/objects/database.lzz\"\n  public:\n#line 33 \"./src/objects/database.lzz\"\n    bool operator () (Backup const * const a, Backup const * const b) const;\n  };\n#line 39 \"./src/objects/database.lzz\"\n  void ThrowDatabaseError ();\n#line 43 \"./src/objects/database.lzz\"\n  static void ThrowSqliteError (Addon * addon, sqlite3 * db_handle);\n#line 47 \"./src/objects/database.lzz\"\n  static void ThrowSqliteError (Addon * addon, char const * message, int code);\n#line 63 \"./src/objects/database.lzz\"\n  bool Log (v8::Isolate * isolate, sqlite3_stmt * handle);\n#line 76 \"./src/objects/database.lzz\"\n  void AddStatement (Statement * stmt);\n#line 77 \"./src/objects/database.lzz\"\n  void RemoveStatement (Statement * stmt);\n#line 80 \"./src/objects/database.lzz\"\n  void AddBackup (Backup * backup);\n#line 81 \"./src/objects/database.lzz\"\n  void RemoveBackup (Backup * backup);\n#line 85 \"./src/objects/database.lzz\"\n  struct State\n  {\n#line 86 \"./src/objects/database.lzz\"\n    bool const open;\n#line 87 \"./src/objects/database.lzz\"\n    bool busy;\n#line 88 \"./src/objects/database.lzz\"\n    bool const safe_ints;\n#line 89 \"./src/objects/database.lzz\"\n    bool const unsafe_mode;\n#line 90 \"./src/objects/database.lzz\"\n    bool was_js_error;\n#line 91 \"./src/objects/database.lzz\"\n    bool const has_logger;\n#line 92 \"./src/objects/database.lzz\"\n    unsigned short int iterators;\n#line 93 \"./src/objects/database.lzz\"\n    Addon * const addon;\n  };\n#line 95 \"./src/objects/database.lzz\"\n  State * GetState ();\n#line 98 \"./src/objects/database.lzz\"\n  sqlite3 * GetHandle ();\n#line 101 \"./src/objects/database.lzz\"\n  Addon * GetAddon ();\n#line 106 \"./src/objects/database.lzz\"\n  void CloseHandles ();\n#line 118 \"./src/objects/database.lzz\"\n  ~ Database ();\n#line 123 \"./src/objects/database.lzz\"\nprivate:\n#line 125 \"./src/objects/database.lzz\"\n  explicit Database (sqlite3 * _db_handle, v8::Isolate * isolate, Addon * _addon, v8::Local <v8::Value> _logger);\n#line 142 \"./src/objects/database.lzz\"\n  static void JS_new (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 187 \"./src/objects/database.lzz\"\n  static void JS_prepare (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 199 \"./src/objects/database.lzz\"\n  static void JS_exec (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 238 \"./src/objects/database.lzz\"\n  static void JS_pragma (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 243 \"./src/objects/database.lzz\"\n  static void JS_backup (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 259 \"./src/objects/database.lzz\"\n  static void JS_function (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 281 \"./src/objects/database.lzz\"\n  static void JS_aggregate (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 308 \"./src/objects/database.lzz\"\n  static void JS_loadExtension (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 329 \"./src/objects/database.lzz\"\n  static void JS_close (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 340 \"./src/objects/database.lzz\"\n  static void JS_defaultSafeIntegers (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 347 \"./src/objects/database.lzz\"\n  static void JS_unsafeMode (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 355 \"./src/objects/database.lzz\"\n  static void JS_open (v8::Local <v8 :: String> _, v8::PropertyCallbackInfo <v8 :: Value> const & info);\n#line 359 \"./src/objects/database.lzz\"\n  static void JS_inTransaction (v8::Local <v8 :: String> _, v8::PropertyCallbackInfo <v8 :: Value> const & info);\n#line 364 \"./src/objects/database.lzz\"\n  static int const MAX_BUFFER_SIZE = node::Buffer::kMaxLength > INT_MAX ? INT_MAX : static_cast<int>(node::Buffer::kMaxLength);\n#line 365 \"./src/objects/database.lzz\"\n  static int const MAX_STRING_SIZE = v8::String::kMaxLength > INT_MAX ? INT_MAX : static_cast<int>(v8::String::kMaxLength);\n#line 367 \"./src/objects/database.lzz\"\n  sqlite3 * const db_handle;\n#line 368 \"./src/objects/database.lzz\"\n  bool open;\n#line 369 \"./src/objects/database.lzz\"\n  bool busy;\n#line 370 \"./src/objects/database.lzz\"\n  bool safe_ints;\n#line 371 \"./src/objects/database.lzz\"\n  bool unsafe_mode;\n#line 372 \"./src/objects/database.lzz\"\n  bool was_js_error;\n#line 373 \"./src/objects/database.lzz\"\n  bool const has_logger;\n#line 374 \"./src/objects/database.lzz\"\n  unsigned short int iterators;\n#line 375 \"./src/objects/database.lzz\"\n  Addon * const addon;\n#line 376 \"./src/objects/database.lzz\"\n  CopyablePersistent <v8::Value> const logger;\n#line 377 \"./src/objects/database.lzz\"\n  std::set <Statement*, CompareStatement> stmts;\n#line 378 \"./src/objects/database.lzz\"\n  std::set <Backup*, CompareBackup> backups;\n};\n#line 1 \"./src/objects/statement.lzz\"\nclass Statement : public node::ObjectWrap\n{\n#line 2 \"./src/objects/statement.lzz\"\n  friend class StatementIterator;\n#line 3 \"./src/objects/statement.lzz\"\npublic:\n#line 5 \"./src/objects/statement.lzz\"\n  static v8::Local <v8 :: Function> Init (v8::Isolate * isolate, v8::Local <v8 :: External> data);\n#line 21 \"./src/objects/statement.lzz\"\n  static bool Compare (Statement const * const a, Statement const * const b);\n#line 26 \"./src/objects/statement.lzz\"\n  BindMap * GetBindMap (v8::Isolate * isolate);\n#line 39 \"./src/objects/statement.lzz\"\n  void CloseHandles ();\n#line 46 \"./src/objects/statement.lzz\"\n  ~ Statement ();\n#line 52 \"./src/objects/statement.lzz\"\nprivate:\n#line 55 \"./src/objects/statement.lzz\"\n  class Extras\n  {\n#line 55 \"./src/objects/statement.lzz\"\n    friend class Statement;\n#line 56 \"./src/objects/statement.lzz\"\n    explicit Extras (sqlite3_uint64 _id);\n#line 57 \"./src/objects/statement.lzz\"\n    BindMap bind_map;\n#line 58 \"./src/objects/statement.lzz\"\n    sqlite3_uint64 const id;\n  };\n#line 61 \"./src/objects/statement.lzz\"\n  explicit Statement (Database * _db, sqlite3_stmt * _handle, sqlite3_uint64 _id, bool _returns_data);\n#line 79 \"./src/objects/statement.lzz\"\n  static void JS_new (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 139 \"./src/objects/statement.lzz\"\n  static void JS_run (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 162 \"./src/objects/statement.lzz\"\n  static void JS_get (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 177 \"./src/objects/statement.lzz\"\n  static void JS_all (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 198 \"./src/objects/statement.lzz\"\n  static void JS_iterate (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 208 \"./src/objects/statement.lzz\"\n  static void JS_bind (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 219 \"./src/objects/statement.lzz\"\n  static void JS_pluck (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 230 \"./src/objects/statement.lzz\"\n  static void JS_expand (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 241 \"./src/objects/statement.lzz\"\n  static void JS_raw (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 252 \"./src/objects/statement.lzz\"\n  static void JS_safeIntegers (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 261 \"./src/objects/statement.lzz\"\n  static void JS_columns (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 304 \"./src/objects/statement.lzz\"\n  Database * const db;\n#line 305 \"./src/objects/statement.lzz\"\n  sqlite3_stmt * const handle;\n#line 306 \"./src/objects/statement.lzz\"\n  Extras * const extras;\n#line 307 \"./src/objects/statement.lzz\"\n  bool alive;\n#line 308 \"./src/objects/statement.lzz\"\n  bool locked;\n#line 309 \"./src/objects/statement.lzz\"\n  bool bound;\n#line 310 \"./src/objects/statement.lzz\"\n  bool has_bind_map;\n#line 311 \"./src/objects/statement.lzz\"\n  bool safe_ints;\n#line 312 \"./src/objects/statement.lzz\"\n  char mode;\n#line 313 \"./src/objects/statement.lzz\"\n  bool const returns_data;\n};\n#line 1 \"./src/objects/statement-iterator.lzz\"\nclass StatementIterator : public node::ObjectWrap\n{\n#line 2 \"./src/objects/statement-iterator.lzz\"\npublic:\n#line 4 \"./src/objects/statement-iterator.lzz\"\n  static v8::Local <v8 :: Function> Init (v8::Isolate * isolate, v8::Local <v8 :: External> data);\n#line 15 \"./src/objects/statement-iterator.lzz\"\n  ~ StatementIterator ();\n#line 17 \"./src/objects/statement-iterator.lzz\"\nprivate:\n#line 19 \"./src/objects/statement-iterator.lzz\"\n  explicit StatementIterator (Statement * _stmt, bool _bound);\n#line 38 \"./src/objects/statement-iterator.lzz\"\n  static void JS_new (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 57 \"./src/objects/statement-iterator.lzz\"\n  static void JS_next (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 64 \"./src/objects/statement-iterator.lzz\"\n  static void JS_return (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 71 \"./src/objects/statement-iterator.lzz\"\n  static void JS_symbolIterator (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 75 \"./src/objects/statement-iterator.lzz\"\n  void Next (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 100 \"./src/objects/statement-iterator.lzz\"\n  void Return (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 105 \"./src/objects/statement-iterator.lzz\"\n  void Throw ();\n#line 111 \"./src/objects/statement-iterator.lzz\"\n  void Cleanup ();\n#line 119 \"./src/objects/statement-iterator.lzz\"\n  static v8::Local <v8::Object> NewRecord (v8::Isolate * isolate, v8::Local <v8::Context> ctx, v8::Local <v8::Value> value, Addon * addon, bool done);\n#line 126 \"./src/objects/statement-iterator.lzz\"\n  static v8::Local <v8::Object> DoneRecord (v8::Isolate * isolate, Addon * addon);\n#line 130 \"./src/objects/statement-iterator.lzz\"\n  Statement * const stmt;\n#line 131 \"./src/objects/statement-iterator.lzz\"\n  sqlite3_stmt * const handle;\n#line 132 \"./src/objects/statement-iterator.lzz\"\n  Database::State * const db_state;\n#line 133 \"./src/objects/statement-iterator.lzz\"\n  bool const bound;\n#line 134 \"./src/objects/statement-iterator.lzz\"\n  bool const safe_ints;\n#line 135 \"./src/objects/statement-iterator.lzz\"\n  char const mode;\n#line 136 \"./src/objects/statement-iterator.lzz\"\n  bool alive;\n#line 137 \"./src/objects/statement-iterator.lzz\"\n  bool logged;\n};\n#line 1 \"./src/objects/backup.lzz\"\nclass Backup : public node::ObjectWrap\n{\n#line 2 \"./src/objects/backup.lzz\"\npublic:\n#line 4 \"./src/objects/backup.lzz\"\n  static v8::Local <v8 :: Function> Init (v8::Isolate * isolate, v8::Local <v8 :: External> data);\n#line 12 \"./src/objects/backup.lzz\"\n  static bool Compare (Backup const * const a, Backup const * const b);\n#line 17 \"./src/objects/backup.lzz\"\n  void CloseHandles ();\n#line 29 \"./src/objects/backup.lzz\"\n  ~ Backup ();\n#line 34 \"./src/objects/backup.lzz\"\nprivate:\n#line 36 \"./src/objects/backup.lzz\"\n  explicit Backup (Database * _db, sqlite3 * _dest_handle, sqlite3_backup * _backup_handle, sqlite3_uint64 _id, bool _unlink);\n#line 49 \"./src/objects/backup.lzz\"\n  static void JS_new (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 92 \"./src/objects/backup.lzz\"\n  static void JS_transfer (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 118 \"./src/objects/backup.lzz\"\n  static void JS_close (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 126 \"./src/objects/backup.lzz\"\n  Database * const db;\n#line 127 \"./src/objects/backup.lzz\"\n  sqlite3 * const dest_handle;\n#line 128 \"./src/objects/backup.lzz\"\n  sqlite3_backup * const backup_handle;\n#line 129 \"./src/objects/backup.lzz\"\n  sqlite3_uint64 const id;\n#line 130 \"./src/objects/backup.lzz\"\n  bool alive;\n#line 131 \"./src/objects/backup.lzz\"\n  bool unlink;\n};\n#line 1 \"./src/util/custom-function.lzz\"\nclass CustomFunction\n{\n#line 2 \"./src/util/custom-function.lzz\"\npublic:\n#line 4 \"./src/util/custom-function.lzz\"\n  explicit CustomFunction (v8::Isolate * _isolate, Database * _db, v8::Local <v8::Function> _fn, char const * _name, bool _safe_ints);\n#line 6 \"./src/util/custom-function.lzz\"\n  virtual ~ CustomFunction ();\n#line 8 \"./src/util/custom-function.lzz\"\n  static void xDestroy (void * self);\n#line 12 \"./src/util/custom-function.lzz\"\n  static void xFunc (sqlite3_context * invocation, int argc, sqlite3_value * * argv);\n#line 29 \"./src/util/custom-function.lzz\"\n  void ThrowResultValueError (sqlite3_context * invocation, bool isBigInt);\n#line 38 \"./src/util/custom-function.lzz\"\nprotected:\n#line 39 \"./src/util/custom-function.lzz\"\n  virtual void PropagateJSError (sqlite3_context * invocation);\n#line 45 \"./src/util/custom-function.lzz\"\nprivate:\n#line 46 \"./src/util/custom-function.lzz\"\n  char const * const name;\n#line 47 \"./src/util/custom-function.lzz\"\n  Database * const db;\n#line 48 \"./src/util/custom-function.lzz\"\nprotected:\n#line 49 \"./src/util/custom-function.lzz\"\n  v8::Isolate * const isolate;\n#line 50 \"./src/util/custom-function.lzz\"\n  CopyablePersistent <v8::Function> const fn;\n#line 51 \"./src/util/custom-function.lzz\"\n  bool const safe_ints;\n};\n#line 1 \"./src/util/custom-aggregate.lzz\"\nclass CustomAggregate : public CustomFunction\n{\n#line 2 \"./src/util/custom-aggregate.lzz\"\npublic:\n#line 4 \"./src/util/custom-aggregate.lzz\"\n  explicit CustomAggregate (v8::Isolate * _isolate, Database * _db, v8::Local <v8::Value> _start, v8::Local <v8::Function> _step, v8::Local <v8::Value> _inverse, v8::Local <v8::Value> _result, char const * _name, bool _safe_ints);\n#line 7 \"./src/util/custom-aggregate.lzz\"\n  static void xStep (sqlite3_context * invocation, int argc, sqlite3_value * * argv);\n#line 11 \"./src/util/custom-aggregate.lzz\"\n  static void xInverse (sqlite3_context * invocation, int argc, sqlite3_value * * argv);\n#line 15 \"./src/util/custom-aggregate.lzz\"\n  static void xValue (sqlite3_context * invocation);\n#line 19 \"./src/util/custom-aggregate.lzz\"\n  static void xFinal (sqlite3_context * invocation);\n#line 23 \"./src/util/custom-aggregate.lzz\"\nprivate:\n#line 24 \"./src/util/custom-aggregate.lzz\"\n  static void xStepBase (sqlite3_context * invocation, int argc, sqlite3_value * * argv, CopyablePersistent <v8::Function> const CustomAggregate::* ptrtm);\n#line 43 \"./src/util/custom-aggregate.lzz\"\n  static void xValueBase (sqlite3_context * invocation, bool is_final);\n#line 67 \"./src/util/custom-aggregate.lzz\"\n  struct Accumulator\n  {\n#line 67 \"./src/util/custom-aggregate.lzz\"\n  public:\n#line 68 \"./src/util/custom-aggregate.lzz\"\n    CopyablePersistent <v8::Value> value;\n#line 69 \"./src/util/custom-aggregate.lzz\"\n    bool initialized;\n#line 70 \"./src/util/custom-aggregate.lzz\"\n    bool is_window;\n  };\n#line 73 \"./src/util/custom-aggregate.lzz\"\n  Accumulator * GetAccumulator (sqlite3_context * invocation);\n#line 90 \"./src/util/custom-aggregate.lzz\"\n  static void DestroyAccumulator (sqlite3_context * invocation);\n#line 96 \"./src/util/custom-aggregate.lzz\"\n  void PropagateJSError (sqlite3_context * invocation);\n#line 101 \"./src/util/custom-aggregate.lzz\"\n  bool const invoke_result;\n#line 102 \"./src/util/custom-aggregate.lzz\"\n  bool const invoke_start;\n#line 103 \"./src/util/custom-aggregate.lzz\"\n  CopyablePersistent <v8::Function> const inverse;\n#line 104 \"./src/util/custom-aggregate.lzz\"\n  CopyablePersistent <v8::Function> const result;\n#line 105 \"./src/util/custom-aggregate.lzz\"\n  CopyablePersistent <v8::Value> const start;\n};\n#line 67 \"./src/util/data.lzz\"\nnamespace Data\n{\n#line 74 \"./src/util/data.lzz\"\n  v8::Local <v8::Value> GetValueJS (v8::Isolate * isolate, sqlite3_stmt * handle, int column, bool safe_ints);\n}\n#line 67 \"./src/util/data.lzz\"\nnamespace Data\n{\n#line 78 \"./src/util/data.lzz\"\n  v8::Local <v8::Value> GetValueJS (v8::Isolate * isolate, sqlite3_value * value, bool safe_ints);\n}\n#line 67 \"./src/util/data.lzz\"\nnamespace Data\n{\n#line 82 \"./src/util/data.lzz\"\n  v8::Local <v8::Value> GetFlatRowJS (v8::Isolate * isolate, v8::Local <v8::Context> ctx, sqlite3_stmt * handle, bool safe_ints);\n}\n#line 67 \"./src/util/data.lzz\"\nnamespace Data\n{\n#line 93 \"./src/util/data.lzz\"\n  v8::Local <v8::Value> GetExpandedRowJS (v8::Isolate * isolate, v8::Local <v8::Context> ctx, sqlite3_stmt * handle, bool safe_ints);\n}\n#line 67 \"./src/util/data.lzz\"\nnamespace Data\n{\n#line 112 \"./src/util/data.lzz\"\n  v8::Local <v8::Value> GetRawRowJS (v8::Isolate * isolate, v8::Local <v8::Context> ctx, sqlite3_stmt * handle, bool safe_ints);\n}\n#line 67 \"./src/util/data.lzz\"\nnamespace Data\n{\n#line 121 \"./src/util/data.lzz\"\n  v8::Local <v8::Value> GetRowJS (v8::Isolate * isolate, v8::Local <v8::Context> ctx, sqlite3_stmt * handle, bool safe_ints, char mode);\n}\n#line 67 \"./src/util/data.lzz\"\nnamespace Data\n{\n#line 130 \"./src/util/data.lzz\"\n  void GetArgumentsJS (v8::Isolate * isolate, v8::Local <v8::Value> * out, sqlite3_value * * values, int argument_count, bool safe_ints);\n}\n#line 67 \"./src/util/data.lzz\"\nnamespace Data\n{\n#line 137 \"./src/util/data.lzz\"\n  int BindValueFromJS (v8::Isolate * isolate, sqlite3_stmt * handle, int index, v8::Local <v8::Value> value);\n}\n#line 67 \"./src/util/data.lzz\"\nnamespace Data\n{\n#line 142 \"./src/util/data.lzz\"\n  void ResultValueFromJS (v8::Isolate * isolate, sqlite3_context * invocation, v8::Local <v8::Value> value, CustomFunction * function);\n}\n#line 1 \"./src/util/binder.lzz\"\nclass Binder\n{\n#line 2 \"./src/util/binder.lzz\"\npublic:\n#line 4 \"./src/util/binder.lzz\"\n  explicit Binder (sqlite3_stmt * _handle);\n#line 11 \"./src/util/binder.lzz\"\n  bool Bind (v8::FunctionCallbackInfo <v8 :: Value> const & info, int argc, Statement * stmt);\n#line 28 \"./src/util/binder.lzz\"\nprivate:\n#line 29 \"./src/util/binder.lzz\"\n  struct Result\n  {\n#line 30 \"./src/util/binder.lzz\"\n    int count;\n#line 31 \"./src/util/binder.lzz\"\n    bool bound_object;\n  };\n#line 34 \"./src/util/binder.lzz\"\n  static bool IsPlainObject (v8::Isolate * isolate, v8::Local <v8::Object> obj);\n#line 43 \"./src/util/binder.lzz\"\n  void Fail (void (* Throw) (char const *), char const * message);\n#line 51 \"./src/util/binder.lzz\"\n  int NextAnonIndex ();\n#line 57 \"./src/util/binder.lzz\"\n  void BindValue (v8::Isolate * isolate, v8::Local <v8::Value> value, int index);\n#line 78 \"./src/util/binder.lzz\"\n  int BindArray (v8::Isolate * isolate, v8::Local <v8::Array> arr);\n#line 104 \"./src/util/binder.lzz\"\n  int BindObject (v8::Isolate * isolate, v8::Local <v8::Object> obj, Statement * stmt);\n#line 148 \"./src/util/binder.lzz\"\n  Result BindArgs (v8::FunctionCallbackInfo <v8 :: Value> const & info, int argc, Statement * stmt);\n#line 185 \"./src/util/binder.lzz\"\n  sqlite3_stmt * handle;\n#line 186 \"./src/util/binder.lzz\"\n  int param_count;\n#line 187 \"./src/util/binder.lzz\"\n  int anon_index;\n#line 188 \"./src/util/binder.lzz\"\n  bool success;\n};\n#line 31 \"./src/better_sqlite3.lzz\"\nstruct Addon\n{\n#line 32 \"./src/better_sqlite3.lzz\"\n  Addon (v8::Isolate * isolate);\n#line 34 \"./src/better_sqlite3.lzz\"\n  CopyablePersistent <v8::Function> Statement;\n#line 35 \"./src/better_sqlite3.lzz\"\n  CopyablePersistent <v8::Function> StatementIterator;\n#line 36 \"./src/better_sqlite3.lzz\"\n  CopyablePersistent <v8::Function> Backup;\n#line 37 \"./src/better_sqlite3.lzz\"\n  CopyablePersistent <v8::Function> SqliteError;\n#line 38 \"./src/better_sqlite3.lzz\"\n  v8::FunctionCallbackInfo <v8 :: Value> const * privileged_info;\n#line 39 \"./src/better_sqlite3.lzz\"\n  sqlite3_uint64 bit_field;\n#line 40 \"./src/better_sqlite3.lzz\"\n  CS cs;\n#line 41 \"./src/better_sqlite3.lzz\"\n  std::set <Database*, Database::CompareDatabase> dbs;\n#line 43 \"./src/better_sqlite3.lzz\"\n  static void JS_setErrorConstructor (v8::FunctionCallbackInfo <v8 :: Value> const & info);\n#line 48 \"./src/better_sqlite3.lzz\"\n  static void Cleanup (void * ptr);\n#line 55 \"./src/better_sqlite3.lzz\"\n  sqlite3_uint64 NextId ();\n#line 58 \"./src/better_sqlite3.lzz\"\n  bool PragmaMode ();\n#line 61 \"./src/better_sqlite3.lzz\"\n  void SetPragmaMode (bool active);\n};\n#line 16 \"./src/util/macros.lzz\"\nLZZ_INLINE v8::Local <v8::String> StringFromUtf8 (v8::Isolate * isolate, char const * data, int length)\n#line 16 \"./src/util/macros.lzz\"\n                                                                                                {\n        return v8::String::NewFromUtf8(isolate, data, v8::NewStringType::kNormal, length).ToLocalChecked();\n}\n#line 19 \"./src/util/macros.lzz\"\nLZZ_INLINE v8::Local <v8::String> InternalizedFromUtf8 (v8::Isolate * isolate, char const * data, int length)\n#line 19 \"./src/util/macros.lzz\"\n                                                                                                      {\n        return v8::String::NewFromUtf8(isolate, data, v8::NewStringType::kInternalized, length).ToLocalChecked();\n}\n#line 22 \"./src/util/macros.lzz\"\nLZZ_INLINE v8::Local <v8::Value> InternalizedFromUtf8OrNull (v8::Isolate * isolate, char const * data, int length)\n#line 22 \"./src/util/macros.lzz\"\n                                                                                                           {\n        if (data == NULL) return v8::Null(isolate);\n        return InternalizedFromUtf8(isolate, data, length);\n}\n#line 26 \"./src/util/macros.lzz\"\nLZZ_INLINE v8::Local <v8::String> InternalizedFromLatin1 (v8::Isolate * isolate, char const * str)\n#line 26 \"./src/util/macros.lzz\"\n                                                                                           {\n        return v8::String::NewFromOneByte(isolate, reinterpret_cast<const uint8_t*>(str), v8::NewStringType::kInternalized).ToLocalChecked();\n}\n#line 33 \"./src/util/macros.lzz\"\nLZZ_INLINE void SetFrozen (v8::Isolate * isolate, v8::Local <v8::Context> ctx, v8::Local <v8::Object> obj, CopyablePersistent <v8::String> & key, v8::Local <v8::Value> value)\n#line 33 \"./src/util/macros.lzz\"\n                                                                                                                                                                    {\n        obj->DefineOwnProperty(ctx, CS::Get(isolate, key), value, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly)).FromJust();\n}\n#line 107 \"./src/util/macros.lzz\"\nLZZ_INLINE bool IS_SKIPPED (char c)\n#line 107 \"./src/util/macros.lzz\"\n                               {\n        return c == ' ' || c == ';' || (c >= '\\t' && c <= '\\r');\n}\n#line 112 \"./src/util/macros.lzz\"\ntemplate <typename T>\n#line 112 \"./src/util/macros.lzz\"\nLZZ_INLINE T * ALLOC_ARRAY (size_t count)\n#line 112 \"./src/util/macros.lzz\"\n                                                      {\n        return static_cast<T*>(::operator new[](count * sizeof(T)));\n}\n#line 117 \"./src/util/macros.lzz\"\ntemplate <typename T>\n#line 117 \"./src/util/macros.lzz\"\nLZZ_INLINE void FREE_ARRAY (T * array_pointer)\n#line 117 \"./src/util/macros.lzz\"\n                                                           {\n        ::operator delete[](array_pointer);\n}\n#line 4 \"./src/util/constants.lzz\"\nLZZ_INLINE v8::Local <v8::String> CS::Get (v8::Isolate * isolate, CopyablePersistent <v8::String> & constant)\n#line 4 \"./src/util/constants.lzz\"\n                                                                                                                {\n                return v8::Local<v8::String>::New(isolate, constant);\n}\n#line 10 \"./src/util/bind-map.lzz\"\nLZZ_INLINE int BindMap::Pair::GetIndex ()\n#line 10 \"./src/util/bind-map.lzz\"\n                                              {\n                                return index;\n}\n#line 14 \"./src/util/bind-map.lzz\"\nLZZ_INLINE v8::Local <v8::String> BindMap::Pair::GetName (v8::Isolate * isolate)\n#line 14 \"./src/util/bind-map.lzz\"\n                                                                                   {\n                                return v8::Local<v8::String>::New(isolate, name);\n}\n#line 41 \"./src/util/bind-map.lzz\"\nLZZ_INLINE BindMap::Pair * BindMap::GetPairs ()\n#line 41 \"./src/util/bind-map.lzz\"\n                                { return pairs;\n}\n#line 42 \"./src/util/bind-map.lzz\"\nLZZ_INLINE int BindMap::GetSize ()\n#line 42 \"./src/util/bind-map.lzz\"\n                             { return length;\n}\n#line 76 \"./src/objects/database.lzz\"\nLZZ_INLINE void Database::AddStatement (Statement * stmt)\n#line 76 \"./src/objects/database.lzz\"\n                                                  { stmts.insert(stmts.end(), stmt);\n}\n#line 77 \"./src/objects/database.lzz\"\nLZZ_INLINE void Database::RemoveStatement (Statement * stmt)\n#line 77 \"./src/objects/database.lzz\"\n                                                     { stmts.erase(stmt);\n}\n#line 80 \"./src/objects/database.lzz\"\nLZZ_INLINE void Database::AddBackup (Backup * backup)\n#line 80 \"./src/objects/database.lzz\"\n                                              { backups.insert(backups.end(), backup);\n}\n#line 81 \"./src/objects/database.lzz\"\nLZZ_INLINE void Database::RemoveBackup (Backup * backup)\n#line 81 \"./src/objects/database.lzz\"\n                                                 { backups.erase(backup);\n}\n#line 95 \"./src/objects/database.lzz\"\nLZZ_INLINE Database::State * Database::GetState ()\n#line 95 \"./src/objects/database.lzz\"\n                                 {\n                return reinterpret_cast<State*>(&open);\n}\n#line 98 \"./src/objects/database.lzz\"\nLZZ_INLINE sqlite3 * Database::GetHandle ()\n#line 98 \"./src/objects/database.lzz\"\n                                    {\n                return db_handle;\n}\n#line 101 \"./src/objects/database.lzz\"\nLZZ_INLINE Addon * Database::GetAddon ()\n#line 101 \"./src/objects/database.lzz\"\n                                 {\n                return addon;\n}\n#line 21 \"./src/objects/statement.lzz\"\nLZZ_INLINE bool Statement::Compare (Statement const * const a, Statement const * const b)\n#line 21 \"./src/objects/statement.lzz\"\n                                                                                         {\n                return a->extras->id < b->extras->id;\n}\n#line 119 \"./src/objects/statement-iterator.lzz\"\nLZZ_INLINE v8::Local <v8::Object> StatementIterator::NewRecord (v8::Isolate * isolate, v8::Local <v8::Context> ctx, v8::Local <v8::Value> value, Addon * addon, bool done)\n#line 119 \"./src/objects/statement-iterator.lzz\"\n                                                                                                                                                             {\n                v8::Local<v8::Object> record = v8::Object::New(isolate);\n                record->Set(ctx, CS::Get(isolate, addon->cs.value), value).FromJust();\n                record->Set(ctx, CS::Get(isolate, addon->cs.done), v8::Boolean::New(isolate, done)).FromJust();\n                return record;\n}\n#line 126 \"./src/objects/statement-iterator.lzz\"\nLZZ_INLINE v8::Local <v8::Object> StatementIterator::DoneRecord (v8::Isolate * isolate, Addon * addon)\n#line 126 \"./src/objects/statement-iterator.lzz\"\n                                                                                           {\n                return NewRecord(isolate, isolate -> GetCurrentContext ( ) , v8::Undefined(isolate), addon, true);\n}\n#line 12 \"./src/objects/backup.lzz\"\nLZZ_INLINE bool Backup::Compare (Backup const * const a, Backup const * const b)\n#line 12 \"./src/objects/backup.lzz\"\n                                                                                   {\n                return a->id < b->id;\n}\n#line 24 \"./src/util/custom-aggregate.lzz\"\nLZZ_INLINE void CustomAggregate::xStepBase (sqlite3_context * invocation, int argc, sqlite3_value * * argv, CopyablePersistent <v8::Function> const CustomAggregate::* ptrtm)\n#line 24 \"./src/util/custom-aggregate.lzz\"\n                                                                                                                                                                  {\n                CustomAggregate * self = static_cast < CustomAggregate * > ( sqlite3_user_data ( invocation ) ) ; v8 :: Isolate * isolate = self -> isolate ; v8 :: HandleScope scope ( isolate ) ; Accumulator * acc = self -> GetAccumulator ( invocation ) ; if ( acc -> value . IsEmpty ( ) ) return ;\n\n                v8::Local<v8::Value> args_fast[5];\n                v8::Local<v8::Value>* args = argc <= 4 ? args_fast : ALLOC_ARRAY<v8::Local<v8::Value>>(argc + 1);\n                args[0] = v8::Local<v8::Value>::New(isolate, acc->value);\n                if (argc != 0) Data::GetArgumentsJS(isolate, args + 1, argv, argc, self->safe_ints);\n\n                v8::MaybeLocal<v8::Value> maybe_return_value = v8::Local<v8::Function>::New(isolate, self->*ptrtm)->Call( isolate -> GetCurrentContext ( ) , v8::Undefined(isolate), argc + 1, args);\n                if (args != args_fast) delete[] args;\n\n                if (maybe_return_value.IsEmpty()) {\n                        self->PropagateJSError(invocation);\n                } else {\n                        v8::Local<v8::Value> return_value = maybe_return_value.ToLocalChecked();\n                        if (!return_value->IsUndefined()) acc->value.Reset(isolate, return_value);\n                }\n}\n#line 43 \"./src/util/custom-aggregate.lzz\"\nLZZ_INLINE void CustomAggregate::xValueBase (sqlite3_context * invocation, bool is_final)\n#line 43 \"./src/util/custom-aggregate.lzz\"\n                                                                                  {\n                CustomAggregate * self = static_cast < CustomAggregate * > ( sqlite3_user_data ( invocation ) ) ; v8 :: Isolate * isolate = self -> isolate ; v8 :: HandleScope scope ( isolate ) ; Accumulator * acc = self -> GetAccumulator ( invocation ) ; if ( acc -> value . IsEmpty ( ) ) return ;\n\n                if (!is_final) {\n                        acc->is_window = true;\n                } else if (acc->is_window) {\n                        DestroyAccumulator(invocation);\n                        return;\n                }\n\n                v8::Local<v8::Value> result = v8::Local<v8::Value>::New(isolate, acc->value);\n                if (self->invoke_result) {\n                        v8::MaybeLocal<v8::Value> maybe_result = v8::Local<v8::Function>::New(isolate, self->result)->Call( isolate -> GetCurrentContext ( ) , v8::Undefined(isolate), 1, &result);\n                        if (maybe_result.IsEmpty()) {\n                                self->PropagateJSError(invocation);\n                                return;\n                        }\n                        result = maybe_result.ToLocalChecked();\n                }\n\n                Data::ResultValueFromJS(isolate, invocation, result, self);\n                if (is_final) DestroyAccumulator(invocation);\n}\n#line 55 \"./src/better_sqlite3.lzz\"\nLZZ_INLINE sqlite3_uint64 Addon::NextId ()\n#line 55 \"./src/better_sqlite3.lzz\"\n                                       {\n                return (bit_field++ << 1) >> 1;\n}\n#line 58 \"./src/better_sqlite3.lzz\"\nLZZ_INLINE bool Addon::PragmaMode ()\n#line 58 \"./src/better_sqlite3.lzz\"\n                                 {\n                return bit_field >> 63 != 0;\n}\n#line 61 \"./src/better_sqlite3.lzz\"\nLZZ_INLINE void Addon::SetPragmaMode (bool active)\n#line 61 \"./src/better_sqlite3.lzz\"\n                                               {\n                bit_field = (bit_field << 1) >> 1 | static_cast<sqlite3_uint64>(active) << 63;\n}\n#undef LZZ_INLINE\n#endif\n"