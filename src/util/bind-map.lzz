"class BindMap {\npublic:\n\n\t// This class represents a mapping between a parameter name and its\n\t// associated parameter index in a prepared statement.\n\tclass Pair {\n\t\tfriend class BindMap;\n\t\tpublic:\n\n\t\t\tinline int GetIndex() {\n\t\t\t\treturn index;\n\t\t\t}\n\n\t\t\tinline v8::Local<v8::String> GetName(v8::Isolate* isolate) {\n\t\t\t\treturn v8::Local<v8::String>::New(isolate, name);\n\t\t\t}\n\n\t\tprivate:\n\t\t\texplicit Pair(v8::Isolate* isolate, const char* _name, int _index)\n\t\t\t\t: name(isolate, InternalizedFromUtf8(isolate, _name, -1)), index(_index) {}\n\n\t\t\texplicit Pair(v8::Isolate* isolate, Pair* pair)\n\t\t\t\t: name(isolate, pair->name), index(pair->index) {}\n\n\t\t\tconst CopyablePersistent<v8::String> name;\n\t\t\tconst int index;\n\t};\n\n\texplicit BindMap(char _) {\n\t\tassert(_ == 0);\n\t\tpairs = NULL;\n\t\tcapacity = 0;\n\t\tlength = 0;\n\t}\n\n\t~BindMap() {\n\t\twhile (length) pairs[--length].~Pair();\n\t\tFREE_ARRAY<Pair>(pairs);\n\t}\n\n\tinline Pair* GetPairs() { return pairs; }\n\tinline int GetSize() { return length; }\n\n\t// Adds a pair to the bind map, expanding the capacity if necessary.\n\tvoid Add(v8::Isolate* isolate, const char* name, int index) {\n\t\tassert(name != NULL);\n\t\tif (capacity == length) Grow(isolate);\n\t\tnew (pairs + length++) Pair(isolate, name, index);\n\t}\n\nprivate:\n\tvoid Grow(v8::Isolate* isolate) {\n\t\tassert(capacity == length);\n\t\tcapacity = (capacity << 1) | 2;\n\t\tPair* new_pairs = ALLOC_ARRAY<Pair>(capacity);\n\t\tfor (int i=0; i<length; ++i) {\n\t\t\tnew (new_pairs + i) Pair(isolate, pairs + i);\n\t\t\tpairs[i].~Pair();\n\t\t}\n\t\tFREE_ARRAY<Pair>(pairs);\n\t\tpairs = new_pairs;\n\t}\n\n\tPair* pairs;\n\tint capacity;\n\tint length;\n};\n"