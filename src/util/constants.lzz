"class CS {\npublic:\n\n\tstatic inline v8::Local<v8::String> Get(v8::Isolate* isolate, CopyablePersistent<v8::String>& constant) {\n\t\treturn v8::Local<v8::String>::New(isolate, constant);\n\t}\n\tv8::Local<v8::String> Code(v8::Isolate* isolate, int code) {\n\t\tauto element = codes.find(code);\n\t\tif (element != codes.end()) return v8::Local<v8::String>::New(isolate, element->second);\n\t\treturn StringFromUtf8(isolate, CONCAT(\"UNKNOWN_SQLITE_ERROR_\", std::to_string(code).c_str(), \"\").c_str(), -1);\n\t}\n\n\texplicit CS(v8::Isolate* isolate) {\n\t\tSetString(isolate, database, \"database\");\n\t\tSetString(isolate, reader, \"reader\");\n\t\tSetString(isolate, source, \"source\");\n\t\tSetString(isolate, memory, \"memory\");\n\t\tSetString(isolate, readonly, \"readonly\");\n\t\tSetString(isolate, name, \"name\");\n\t\tSetString(isolate, next, \"next\");\n\t\tSetString(isolate, length, \"length\");\n\t\tSetString(isolate, done, \"done\");\n\t\tSetString(isolate, value, \"value\");\n\t\tSetString(isolate, changes, \"changes\");\n\t\tSetString(isolate, lastInsertRowid, \"lastInsertRowid\");\n\t\tSetString(isolate, statement, \"statement\");\n\t\tSetString(isolate, column, \"column\");\n\t\tSetString(isolate, table, \"table\");\n\t\tSetString(isolate, type, \"type\");\n\t\tSetString(isolate, totalPages, \"totalPages\");\n\t\tSetString(isolate, remainingPages, \"remainingPages\");\n\n\t\tSetCode(isolate, SQLITE_OK, \"SQLITE_OK\");\n\t\tSetCode(isolate, SQLITE_ERROR, \"SQLITE_ERROR\");\n\t\tSetCode(isolate, SQLITE_INTERNAL, \"SQLITE_INTERNAL\");\n\t\tSetCode(isolate, SQLITE_PERM, \"SQLITE_PERM\");\n\t\tSetCode(isolate, SQLITE_ABORT, \"SQLITE_ABORT\");\n\t\tSetCode(isolate, SQLITE_BUSY, \"SQLITE_BUSY\");\n\t\tSetCode(isolate, SQLITE_LOCKED, \"SQLITE_LOCKED\");\n\t\tSetCode(isolate, SQLITE_NOMEM, \"SQLITE_NOMEM\");\n\t\tSetCode(isolate, SQLITE_READONLY, \"SQLITE_READONLY\");\n\t\tSetCode(isolate, SQLITE_INTERRUPT, \"SQLITE_INTERRUPT\");\n\t\tSetCode(isolate, SQLITE_IOERR, \"SQLITE_IOERR\");\n\t\tSetCode(isolate, SQLITE_CORRUPT, \"SQLITE_CORRUPT\");\n\t\tSetCode(isolate, SQLITE_NOTFOUND, \"SQLITE_NOTFOUND\");\n\t\tSetCode(isolate, SQLITE_FULL, \"SQLITE_FULL\");\n\t\tSetCode(isolate, SQLITE_CANTOPEN, \"SQLITE_CANTOPEN\");\n\t\tSetCode(isolate, SQLITE_PROTOCOL, \"SQLITE_PROTOCOL\");\n\t\tSetCode(isolate, SQLITE_EMPTY, \"SQLITE_EMPTY\");\n\t\tSetCode(isolate, SQLITE_SCHEMA, \"SQLITE_SCHEMA\");\n\t\tSetCode(isolate, SQLITE_TOOBIG, \"SQLITE_TOOBIG\");\n\t\tSetCode(isolate, SQLITE_CONSTRAINT, \"SQLITE_CONSTRAINT\");\n\t\tSetCode(isolate, SQLITE_MISMATCH, \"SQLITE_MISMATCH\");\n\t\tSetCode(isolate, SQLITE_MISUSE, \"SQLITE_MISUSE\");\n\t\tSetCode(isolate, SQLITE_NOLFS, \"SQLITE_NOLFS\");\n\t\tSetCode(isolate, SQLITE_AUTH, \"SQLITE_AUTH\");\n\t\tSetCode(isolate, SQLITE_FORMAT, \"SQLITE_FORMAT\");\n\t\tSetCode(isolate, SQLITE_RANGE, \"SQLITE_RANGE\");\n\t\tSetCode(isolate, SQLITE_NOTADB, \"SQLITE_NOTADB\");\n\t\tSetCode(isolate, SQLITE_NOTICE, \"SQLITE_NOTICE\");\n\t\tSetCode(isolate, SQLITE_WARNING, \"SQLITE_WARNING\");\n\t\tSetCode(isolate, SQLITE_ROW, \"SQLITE_ROW\");\n\t\tSetCode(isolate, SQLITE_DONE, \"SQLITE_DONE\");\n\t\tSetCode(isolate, SQLITE_IOERR_READ, \"SQLITE_IOERR_READ\");\n\t\tSetCode(isolate, SQLITE_IOERR_SHORT_READ, \"SQLITE_IOERR_SHORT_READ\");\n\t\tSetCode(isolate, SQLITE_IOERR_WRITE, \"SQLITE_IOERR_WRITE\");\n\t\tSetCode(isolate, SQLITE_IOERR_FSYNC, \"SQLITE_IOERR_FSYNC\");\n\t\tSetCode(isolate, SQLITE_IOERR_DIR_FSYNC, \"SQLITE_IOERR_DIR_FSYNC\");\n\t\tSetCode(isolate, SQLITE_IOERR_TRUNCATE, \"SQLITE_IOERR_TRUNCATE\");\n\t\tSetCode(isolate, SQLITE_IOERR_FSTAT, \"SQLITE_IOERR_FSTAT\");\n\t\tSetCode(isolate, SQLITE_IOERR_UNLOCK, \"SQLITE_IOERR_UNLOCK\");\n\t\tSetCode(isolate, SQLITE_IOERR_RDLOCK, \"SQLITE_IOERR_RDLOCK\");\n\t\tSetCode(isolate, SQLITE_IOERR_DELETE, \"SQLITE_IOERR_DELETE\");\n\t\tSetCode(isolate, SQLITE_IOERR_BLOCKED, \"SQLITE_IOERR_BLOCKED\");\n\t\tSetCode(isolate, SQLITE_IOERR_NOMEM, \"SQLITE_IOERR_NOMEM\");\n\t\tSetCode(isolate, SQLITE_IOERR_ACCESS, \"SQLITE_IOERR_ACCESS\");\n\t\tSetCode(isolate, SQLITE_IOERR_CHECKRESERVEDLOCK, \"SQLITE_IOERR_CHECKRESERVEDLOCK\");\n\t\tSetCode(isolate, SQLITE_IOERR_LOCK, \"SQLITE_IOERR_LOCK\");\n\t\tSetCode(isolate, SQLITE_IOERR_CLOSE, \"SQLITE_IOERR_CLOSE\");\n\t\tSetCode(isolate, SQLITE_IOERR_DIR_CLOSE, \"SQLITE_IOERR_DIR_CLOSE\");\n\t\tSetCode(isolate, SQLITE_IOERR_SHMOPEN, \"SQLITE_IOERR_SHMOPEN\");\n\t\tSetCode(isolate, SQLITE_IOERR_SHMSIZE, \"SQLITE_IOERR_SHMSIZE\");\n\t\tSetCode(isolate, SQLITE_IOERR_SHMLOCK, \"SQLITE_IOERR_SHMLOCK\");\n\t\tSetCode(isolate, SQLITE_IOERR_SHMMAP, \"SQLITE_IOERR_SHMMAP\");\n\t\tSetCode(isolate, SQLITE_IOERR_SEEK, \"SQLITE_IOERR_SEEK\");\n\t\tSetCode(isolate, SQLITE_IOERR_DELETE_NOENT, \"SQLITE_IOERR_DELETE_NOENT\");\n\t\tSetCode(isolate, SQLITE_IOERR_MMAP, \"SQLITE_IOERR_MMAP\");\n\t\tSetCode(isolate, SQLITE_IOERR_GETTEMPPATH, \"SQLITE_IOERR_GETTEMPPATH\");\n\t\tSetCode(isolate, SQLITE_IOERR_CONVPATH, \"SQLITE_IOERR_CONVPATH\");\n\t\tSetCode(isolate, SQLITE_IOERR_VNODE, \"SQLITE_IOERR_VNODE\");\n\t\tSetCode(isolate, SQLITE_IOERR_AUTH, \"SQLITE_IOERR_AUTH\");\n\t\tSetCode(isolate, SQLITE_LOCKED_SHAREDCACHE, \"SQLITE_LOCKED_SHAREDCACHE\");\n\t\tSetCode(isolate, SQLITE_BUSY_RECOVERY, \"SQLITE_BUSY_RECOVERY\");\n\t\tSetCode(isolate, SQLITE_BUSY_SNAPSHOT, \"SQLITE_BUSY_SNAPSHOT\");\n\t\tSetCode(isolate, SQLITE_CANTOPEN_NOTEMPDIR, \"SQLITE_CANTOPEN_NOTEMPDIR\");\n\t\tSetCode(isolate, SQLITE_CANTOPEN_ISDIR, \"SQLITE_CANTOPEN_ISDIR\");\n\t\tSetCode(isolate, SQLITE_CANTOPEN_FULLPATH, \"SQLITE_CANTOPEN_FULLPATH\");\n\t\tSetCode(isolate, SQLITE_CANTOPEN_CONVPATH, \"SQLITE_CANTOPEN_CONVPATH\");\n\t\tSetCode(isolate, SQLITE_CORRUPT_VTAB, \"SQLITE_CORRUPT_VTAB\");\n\t\tSetCode(isolate, SQLITE_READONLY_RECOVERY, \"SQLITE_READONLY_RECOVERY\");\n\t\tSetCode(isolate, SQLITE_READONLY_CANTLOCK, \"SQLITE_READONLY_CANTLOCK\");\n\t\tSetCode(isolate, SQLITE_READONLY_ROLLBACK, \"SQLITE_READONLY_ROLLBACK\");\n\t\tSetCode(isolate, SQLITE_READONLY_DBMOVED, \"SQLITE_READONLY_DBMOVED\");\n\t\tSetCode(isolate, SQLITE_ABORT_ROLLBACK, \"SQLITE_ABORT_ROLLBACK\");\n\t\tSetCode(isolate, SQLITE_CONSTRAINT_CHECK, \"SQLITE_CONSTRAINT_CHECK\");\n\t\tSetCode(isolate, SQLITE_CONSTRAINT_COMMITHOOK, \"SQLITE_CONSTRAINT_COMMITHOOK\");\n\t\tSetCode(isolate, SQLITE_CONSTRAINT_FOREIGNKEY, \"SQLITE_CONSTRAINT_FOREIGNKEY\");\n\t\tSetCode(isolate, SQLITE_CONSTRAINT_FUNCTION, \"SQLITE_CONSTRAINT_FUNCTION\");\n\t\tSetCode(isolate, SQLITE_CONSTRAINT_NOTNULL, \"SQLITE_CONSTRAINT_NOTNULL\");\n\t\tSetCode(isolate, SQLITE_CONSTRAINT_PRIMARYKEY, \"SQLITE_CONSTRAINT_PRIMARYKEY\");\n\t\tSetCode(isolate, SQLITE_CONSTRAINT_TRIGGER, \"SQLITE_CONSTRAINT_TRIGGER\");\n\t\tSetCode(isolate, SQLITE_CONSTRAINT_UNIQUE, \"SQLITE_CONSTRAINT_UNIQUE\");\n\t\tSetCode(isolate, SQLITE_CONSTRAINT_VTAB, \"SQLITE_CONSTRAINT_VTAB\");\n\t\tSetCode(isolate, SQLITE_CONSTRAINT_ROWID, \"SQLITE_CONSTRAINT_ROWID\");\n\t\tSetCode(isolate, SQLITE_NOTICE_RECOVER_WAL, \"SQLITE_NOTICE_RECOVER_WAL\");\n\t\tSetCode(isolate, SQLITE_NOTICE_RECOVER_ROLLBACK, \"SQLITE_NOTICE_RECOVER_ROLLBACK\");\n\t\tSetCode(isolate, SQLITE_WARNING_AUTOINDEX, \"SQLITE_WARNING_AUTOINDEX\");\n\t\tSetCode(isolate, SQLITE_AUTH_USER, \"SQLITE_AUTH_USER\");\n\t\tSetCode(isolate, SQLITE_OK_LOAD_PERMANENTLY, \"SQLITE_OK_LOAD_PERMANENTLY\");\n\t}\n\n\tCopyablePersistent<v8::String> database;\n\tCopyablePersistent<v8::String> reader;\n\tCopyablePersistent<v8::String> source;\n\tCopyablePersistent<v8::String> memory;\n\tCopyablePersistent<v8::String> readonly;\n\tCopyablePersistent<v8::String> name;\n\tCopyablePersistent<v8::String> next;\n\tCopyablePersistent<v8::String> length;\n\tCopyablePersistent<v8::String> done;\n\tCopyablePersistent<v8::String> value;\n\tCopyablePersistent<v8::String> changes;\n\tCopyablePersistent<v8::String> lastInsertRowid;\n\tCopyablePersistent<v8::String> statement;\n\tCopyablePersistent<v8::String> column;\n\tCopyablePersistent<v8::String> table;\n\tCopyablePersistent<v8::String> type;\n\tCopyablePersistent<v8::String> totalPages;\n\tCopyablePersistent<v8::String> remainingPages;\n\nprivate:\n\tstatic void SetString(v8::Isolate* isolate, CopyablePersistent<v8::String>& constant, const char* str) {\n\t\tconstant.Reset(isolate, InternalizedFromLatin1(isolate, str));\n\t}\n\tvoid SetCode(v8::Isolate* isolate, int code, const char* str) {\n\t\tcodes.emplace(std::piecewise_construct, std::forward_as_tuple(code), std::forward_as_tuple(isolate, InternalizedFromLatin1(isolate, str)));\n\t}\n\n\tstd::unordered_map<int, CopyablePersistent<v8::String> > codes;\n};\n"