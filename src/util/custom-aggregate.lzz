"class CustomAggregate : public CustomFunction {\npublic:\n\n\texplicit CustomAggregate(v8::Isolate* _isolate, Database* _db, v8::Local<v8::Value> _start, v8::Local<v8::Function> _step, v8::Local<v8::Value> _inverse, v8::Local<v8::Value> _result, const char* _name, bool _safe_ints)\n\t\t: CustomFunction(_isolate, _db, _step, _name, _safe_ints), invoke_result(_result->IsFunction()), invoke_start(_start->IsFunction()), inverse(_isolate, _inverse->IsFunction() ? v8::Local<v8::Function>::Cast(_inverse) : v8::Local<v8::Function>()), result(_isolate, _result->IsFunction() ? v8::Local<v8::Function>::Cast(_result) : v8::Local<v8::Function>()), start(_isolate, _start) {}\n\n\tstatic void xStep(sqlite3_context* invocation, int argc, sqlite3_value** argv) {\n\t\txStepBase(invocation, argc, argv, &CustomAggregate::fn);\n\t}\n\n\tstatic void xInverse(sqlite3_context* invocation, int argc, sqlite3_value** argv) {\n\t\txStepBase(invocation, argc, argv, &CustomAggregate::inverse);\n\t}\n\n\tstatic void xValue(sqlite3_context* invocation) {\n\t\txValueBase(invocation, false);\n\t}\n\n\tstatic void xFinal(sqlite3_context* invocation) {\n\t\txValueBase(invocation, true);\n\t}\n\nprivate:\n\tstatic inline void xStepBase(sqlite3_context* invocation, int argc, sqlite3_value** argv, const CopyablePersistent<v8::Function> CustomAggregate::*ptrtm) {\n\t\tAGGREGATE_START();\n\n\t\tv8::Local<v8::Value> args_fast[5];\n\t\tv8::Local<v8::Value>* args = argc <= 4 ? args_fast : ALLOC_ARRAY<v8::Local<v8::Value>>(argc + 1);\n\t\targs[0] = v8::Local<v8::Value>::New(isolate, acc->value);\n\t\tif (argc != 0) Data::GetArgumentsJS(isolate, args + 1, argv, argc, self->safe_ints);\n\n\t\tv8::MaybeLocal<v8::Value> maybe_return_value = v8::Local<v8::Function>::New(isolate, self->*ptrtm)->Call(OnlyContext, v8::Undefined(isolate), argc + 1, args);\n\t\tif (args != args_fast) delete[] args;\n\n\t\tif (maybe_return_value.IsEmpty()) {\n\t\t\tself->PropagateJSError(invocation);\n\t\t} else {\n\t\t\tv8::Local<v8::Value> return_value = maybe_return_value.ToLocalChecked();\n\t\t\tif (!return_value->IsUndefined()) acc->value.Reset(isolate, return_value);\n\t\t}\n\t}\n\n\tstatic inline void xValueBase(sqlite3_context* invocation, bool is_final) {\n\t\tAGGREGATE_START();\n\n\t\tif (!is_final) {\n\t\t\tacc->is_window = true;\n\t\t} else if (acc->is_window) {\n\t\t\tDestroyAccumulator(invocation);\n\t\t\treturn;\n\t\t}\n\n\t\tv8::Local<v8::Value> result = v8::Local<v8::Value>::New(isolate, acc->value);\n\t\tif (self->invoke_result) {\n\t\t\tv8::MaybeLocal<v8::Value> maybe_result = v8::Local<v8::Function>::New(isolate, self->result)->Call(OnlyContext, v8::Undefined(isolate), 1, &result);\n\t\t\tif (maybe_result.IsEmpty()) {\n\t\t\t\tself->PropagateJSError(invocation);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = maybe_result.ToLocalChecked();\n\t\t}\n\n\t\tData::ResultValueFromJS(isolate, invocation, result, self);\n\t\tif (is_final) DestroyAccumulator(invocation);\n\t}\n\n\tstruct Accumulator { public:\n\t\tCopyablePersistent<v8::Value> value;\n\t\tbool initialized;\n\t\tbool is_window;\n\t}\n\n\tAccumulator* GetAccumulator(sqlite3_context* invocation) {\n\t\tAccumulator* acc = static_cast<Accumulator*>(sqlite3_aggregate_context(invocation, sizeof(Accumulator)));\n\t\tif (!acc->initialized) {\n\t\t\tassert(acc->value.IsEmpty());\n\t\t\tacc->initialized = true;\n\t\t\tif (invoke_start) {\n\t\t\t\tv8::MaybeLocal<v8::Value> maybe_seed = v8::Local<v8::Function>::Cast(v8::Local<v8::Value>::New(isolate, start))->Call(OnlyContext, v8::Undefined(isolate), 0, NULL);\n\t\t\t\tif (maybe_seed.IsEmpty()) PropagateJSError(invocation);\n\t\t\t\telse acc->value.Reset(isolate, maybe_seed.ToLocalChecked());\n\t\t\t} else {\n\t\t\t\tassert(!start.IsEmpty());\n\t\t\t\tacc->value.Reset(isolate, start);\n\t\t\t}\n\t\t}\n\t\treturn acc;\n\t}\n\n\tstatic void DestroyAccumulator(sqlite3_context* invocation) {\n\t\tAccumulator* acc = static_cast<Accumulator*>(sqlite3_aggregate_context(invocation, sizeof(Accumulator)));\n\t\tassert(acc->initialized);\n\t\tacc->value.Reset();\n\t}\n\n\tvoid PropagateJSError(sqlite3_context* invocation) {\n\t\tDestroyAccumulator(invocation);\n\t\tCustomFunction::PropagateJSError(invocation);\n\t}\n\n\tconst bool invoke_result;\n\tconst bool invoke_start;\n\tconst CopyablePersistent<v8::Function> inverse;\n\tconst CopyablePersistent<v8::Function> result;\n\tconst CopyablePersistent<v8::Value> start;\n};\n"