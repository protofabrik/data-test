"'use strict';\nconst fs = require('fs-extra');\nconst path = require('path');\n\nconst tables = new Map([\n\t['small', {\n\t\tschema: '(nul, integer INTEGER, real REAL, text TEXT, blob BLOB)',\n\t\tdata: [null, 0x7fffffff, 1 / 3, 'this is the text', Buffer.from('this is the blob')],\n\t\tcount: 10000,\n\t}],\n\t['large_text', {\n\t\tschema: '(text TEXT)',\n\t\tdata: ['this is the text'.repeat(2048)],\n\t\tcount: 10000,\n\t}],\n\t['large_blob', {\n\t\tschema: '(blob BLOB)',\n\t\tdata: [Buffer.from('this is the blob'.repeat(2048))],\n\t\tcount: 10000,\n\t}],\n]);\n\n/*\n\tThis function creates a pre-populated database that is deleted when the\n\tprocess exits.\n */\n\nmodule.exports = () => {\n\tconst tempDir = path.join(__dirname, '..', 'temp');\n\tprocess.on('exit', () => fs.removeSync(tempDir));\n\tfs.removeSync(tempDir);\n\tfs.ensureDirSync(tempDir);\n\n\tconst db = require('../.')(path.join(tempDir, 'benchmark.db'));\n\tdb.pragma('journal_mode = OFF');\n\tdb.pragma('synchronous = OFF');\n\n\tfor (const [name, ctx] of tables.entries()) {\n\t\tdb.exec(`CREATE TABLE ${name} ${ctx.schema}`);\n\t\tconst columns = db.pragma(`table_info(${name})`).map(() => '?');\n\t\tconst insert = db.prepare(`INSERT INTO ${name} VALUES (${columns.join(', ')})`).bind(ctx.data);\n\t\tfor (let i = 0; i < ctx.count; ++i) insert.run();\n\t}\n\n\tdb.close();\n\treturn tables;\n};\n"