"'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst { promisify } = require('util');\n\nconst fsAccess = promisify(fs.access);\n\nmodule.exports = (createBackup) => {\n\treturn async function backup(filename, options) {\n\t\tif (options == null) options = {};\n\t\tif (typeof filename !== 'string') throw new TypeError('Expected first argument to be a string');\n\t\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n\n\t\tfilename = filename.trim();\n\t\tif (!filename) throw new TypeError('Backup filename cannot be an empty string');\n\t\tif (filename === ':memory:') throw new TypeError('Invalid backup filename \":memory:\"');\n\n\t\tconst attachedName = 'attached' in options ? options.attached : 'main';\n\t\tconst handler = 'progress' in options ? options.progress : null;\n\n\t\tif (typeof attachedName !== 'string') throw new TypeError('Expected the \"attached\" option to be a string');\n\t\tif (!attachedName) throw new TypeError('The \"attached\" option cannot be an empty string');\n\t\tif (handler != null && typeof handler !== 'function') throw new TypeError('Expected the \"progress\" option to be a function');\n\n\t\tawait fsAccess(path.dirname(filename)).catch(() => {\n\t\t\tthrow new TypeError('Cannot save backup because the directory does not exist');\n\t\t});\n\n\t\tconst newFile = await fsAccess(filename).then(() => false, () => true);\n\t\treturn runBackup(createBackup.call(this, attachedName, filename, newFile), handler || null);\n\t};\n};\n\nconst runBackup = (backup, handler) => {\n\tlet rate = 0;\n\tlet useDefault = true;\n\n\treturn new Promise((resolve, reject) => {\n\t\tsetImmediate(function step() {\n\t\t\ttry {\n\t\t\t\tconst progress = backup.transfer(rate);\n\t\t\t\tif (!progress.remainingPages) {\n\t\t\t\t\tbackup.close();\n\t\t\t\t\tresolve(progress);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (useDefault) {\n\t\t\t\t\tuseDefault = false;\n\t\t\t\t\trate = 100;\n\t\t\t\t}\n\t\t\t\tif (handler) {\n\t\t\t\t\tconst ret = handler(progress);\n\t\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\t\tif (typeof ret === 'number' && ret === ret) rate = Math.max(0, Math.min(0x7fffffff, Math.round(ret)));\n\t\t\t\t\t\telse throw new TypeError('Expected progress callback to return a number or undefined');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetImmediate(step);\n\t\t\t} catch (err) {\n\t\t\t\tbackup.close();\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t});\n}\n"