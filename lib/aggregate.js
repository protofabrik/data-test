"'use strict';\nconst { getBooleanOption } = require('./util');\n\nmodule.exports = (createAggregate) => {\n\treturn function defineAggregate(name, options) {\n\t\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n\t\tif (typeof options !== 'object' || options === null) throw new TypeError('Expected second argument to be an options object');\n\t\tif (!name) throw new TypeError('User-defined function name cannot be an empty string');\n\n\t\tconst start = 'start' in options ? options.start : null;\n\t\tconst step = getFunctionOption(options, 'step', true);\n\t\tconst inverse = getFunctionOption(options, 'inverse', false);\n\t\tconst result = getFunctionOption(options, 'result', false);\n\t\tconst safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\n\t\tconst deterministic = getBooleanOption(options, 'deterministic');\n\t\tconst varargs = getBooleanOption(options, 'varargs');\n\t\tlet argCount = -1;\n\n\t\tif (!varargs) {\n\t\t\targCount = Math.max(getLength(step), inverse ? getLength(inverse) : 0);\n\t\t\tif (argCount > 0) argCount -= 1;\n\t\t\tif (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\n\t\t}\n\n\t\treturn createAggregate.call(this, start, step, inverse, result, name, argCount, safeIntegers, deterministic);\n\t};\n};\n\nconst getFunctionOption = (options, key, required) => {\n\tconst value = key in options ? options[key] : null;\n\tif (typeof value === 'function') return value;\n\tif (value != null) throw new TypeError(`Expected the \"${key}\" option to be a function`);\n\tif (required) throw new TypeError(`Missing required option \"${key}\"`);\n\treturn null;\n};\n\nconst getLength = ({ length }) => {\n\tif (Number.isInteger(length) && length >= 0) return length;\n\tthrow new TypeError('Expected function.length to be a positive integer');\n};\n"