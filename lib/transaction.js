"'use strict';\nconst controllers = new WeakMap;\n\nmodule.exports = function transaction(fn) {\n\tif (typeof fn !== 'function') throw new TypeError('Expected first argument to be a function');\n\tconst controller = getController(this);\n\tconst { apply } = Function.prototype;\n\n\tconst properties = {\n\t\tdefault: { value: wrapTransaction(apply, fn, this, controller.default) },\n\t\tdeferred: { value: wrapTransaction(apply, fn, this, controller.deferred) },\n\t\timmediate: { value: wrapTransaction(apply, fn, this, controller.immediate) },\n\t\texclusive: { value: wrapTransaction(apply, fn, this, controller.exclusive) },\n\t\tdatabase: { value: this, enumerable: true },\n\t};\n\n\tObject.defineProperties(properties.default.value, properties);\n\tObject.defineProperties(properties.deferred.value, properties);\n\tObject.defineProperties(properties.immediate.value, properties);\n\tObject.defineProperties(properties.exclusive.value, properties);\n\n\treturn properties.default.value;\n};\n\nconst getController = (db) => {\n\tlet controller = controllers.get(db);\n\tif (!controller) {\n\t\tconst shared = {\n\t\t\tcommit: db.prepare('COMMIT'),\n\t\t\trollback: db.prepare('ROLLBACK'),\n\t\t\tsavepoint: db.prepare('SAVEPOINT `\\t_bs3.\\t`'),\n\t\t\trelease: db.prepare('RELEASE `\\t_bs3.\\t`'),\n\t\t\trollbackTo: db.prepare('ROLLBACK TO `\\t_bs3.\\t`'),\n\t\t};\n\t\tcontrollers.set(db, controller = {\n\t\t\tdefault: Object.assign({ begin: db.prepare('BEGIN') }, shared),\n\t\t\tdeferred: Object.assign({ begin: db.prepare('BEGIN DEFERRED') }, shared),\n\t\t\timmediate: Object.assign({ begin: db.prepare('BEGIN IMMEDIATE') }, shared),\n\t\t\texclusive: Object.assign({ begin: db.prepare('BEGIN EXCLUSIVE') }, shared),\n\t\t});\n\t}\n\treturn controller;\n};\n\nconst wrapTransaction = (apply, fn, db, { begin, commit, rollback, savepoint, release, rollbackTo }) => function sqliteTransaction() {\n\tlet before, after, undo;\n\tif (db.inTransaction) {\n\t\tbefore = savepoint;\n\t\tafter = release;\n\t\tundo = rollbackTo;\n\t} else {\n\t\tbefore = begin;\n\t\tafter = commit;\n\t\tundo = rollback;\n\t}\n\tbefore.run();\n\ttry {\n\t\tconst result = apply.call(fn, this, arguments);\n\t\tafter.run();\n\t\treturn result;\n\t} catch (ex) {\n\t\tif (db.inTransaction) {\n\t\t\tundo.run();\n\t\t\tif (undo !== rollback) after.run();\n\t\t}\n\t\tthrow ex;\n\t}\n};\n"